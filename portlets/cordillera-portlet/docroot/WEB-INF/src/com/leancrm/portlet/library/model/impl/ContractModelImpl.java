/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.leancrm.portlet.library.model.impl;

import com.leancrm.portlet.library.model.Contract;
import com.leancrm.portlet.library.model.ContractModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Contract service. Represents a row in the &quot;crm_Contract&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.leancrm.portlet.library.model.ContractModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContractImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContractImpl
 * @see com.leancrm.portlet.library.model.Contract
 * @see com.leancrm.portlet.library.model.ContractModel
 * @generated
 */
public class ContractModelImpl extends BaseModelImpl<Contract>
	implements ContractModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contract model instance should use the {@link com.leancrm.portlet.library.model.Contract} interface instead.
	 */
	public static final String TABLE_NAME = "crm_Contract";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contractId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "organizationId", Types.BIGINT },
			{ "enterpriseId", Types.BIGINT },
			{ "contactId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "amount", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table crm_Contract (contractId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,organizationId LONG,enterpriseId LONG,contactId LONG,description VARCHAR(75) null,amount DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table crm_Contract";
	public static final String ORDER_BY_JPQL = " ORDER BY contract.contractId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY crm_Contract.contractId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.leancrm.portlet.library.model.Contract"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.leancrm.portlet.library.model.Contract"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.leancrm.portlet.library.model.Contract"),
			true);
	public static long CONTACTID_COLUMN_BITMASK = 1L;
	public static long ENTERPRISEID_COLUMN_BITMASK = 2L;
	public static long ORGANIZATIONID_COLUMN_BITMASK = 4L;
	public static long CONTRACTID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.leancrm.portlet.library.model.Contract"));

	public ContractModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contractId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContractId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contractId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Contract.class;
	}

	@Override
	public String getModelClassName() {
		return Contract.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contractId", getContractId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("enterpriseId", getEnterpriseId());
		attributes.put("contactId", getContactId());
		attributes.put("description", getDescription());
		attributes.put("amount", getAmount());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contractId = (Long)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long enterpriseId = (Long)attributes.get("enterpriseId");

		if (enterpriseId != null) {
			setEnterpriseId(enterpriseId);
		}

		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}
	}

	@Override
	public long getContractId() {
		return _contractId;
	}

	@Override
	public void setContractId(long contractId) {
		_contractId = contractId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public long getEnterpriseId() {
		return _enterpriseId;
	}

	@Override
	public void setEnterpriseId(long enterpriseId) {
		_columnBitmask |= ENTERPRISEID_COLUMN_BITMASK;

		if (!_setOriginalEnterpriseId) {
			_setOriginalEnterpriseId = true;

			_originalEnterpriseId = _enterpriseId;
		}

		_enterpriseId = enterpriseId;
	}

	public long getOriginalEnterpriseId() {
		return _originalEnterpriseId;
	}

	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		_columnBitmask |= CONTACTID_COLUMN_BITMASK;

		if (!_setOriginalContactId) {
			_setOriginalContactId = true;

			_originalContactId = _contactId;
		}

		_contactId = contactId;
	}

	public long getOriginalContactId() {
		return _originalContactId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Contract.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Contract toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Contract)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContractImpl contractImpl = new ContractImpl();

		contractImpl.setContractId(getContractId());
		contractImpl.setGroupId(getGroupId());
		contractImpl.setCompanyId(getCompanyId());
		contractImpl.setCreateDate(getCreateDate());
		contractImpl.setOrganizationId(getOrganizationId());
		contractImpl.setEnterpriseId(getEnterpriseId());
		contractImpl.setContactId(getContactId());
		contractImpl.setDescription(getDescription());
		contractImpl.setAmount(getAmount());

		contractImpl.resetOriginalValues();

		return contractImpl;
	}

	@Override
	public int compareTo(Contract contract) {
		long primaryKey = contract.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Contract)) {
			return false;
		}

		Contract contract = (Contract)obj;

		long primaryKey = contract.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContractModelImpl contractModelImpl = this;

		contractModelImpl._originalOrganizationId = contractModelImpl._organizationId;

		contractModelImpl._setOriginalOrganizationId = false;

		contractModelImpl._originalEnterpriseId = contractModelImpl._enterpriseId;

		contractModelImpl._setOriginalEnterpriseId = false;

		contractModelImpl._originalContactId = contractModelImpl._contactId;

		contractModelImpl._setOriginalContactId = false;

		contractModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Contract> toCacheModel() {
		ContractCacheModel contractCacheModel = new ContractCacheModel();

		contractCacheModel.contractId = getContractId();

		contractCacheModel.groupId = getGroupId();

		contractCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			contractCacheModel.createDate = createDate.getTime();
		}
		else {
			contractCacheModel.createDate = Long.MIN_VALUE;
		}

		contractCacheModel.organizationId = getOrganizationId();

		contractCacheModel.enterpriseId = getEnterpriseId();

		contractCacheModel.contactId = getContactId();

		contractCacheModel.description = getDescription();

		String description = contractCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			contractCacheModel.description = null;
		}

		contractCacheModel.amount = getAmount();

		return contractCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{contractId=");
		sb.append(getContractId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", enterpriseId=");
		sb.append(getEnterpriseId());
		sb.append(", contactId=");
		sb.append(getContactId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.leancrm.portlet.library.model.Contract");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enterpriseId</column-name><column-value><![CDATA[");
		sb.append(getEnterpriseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Contract.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Contract.class
		};
	private long _contractId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private long _enterpriseId;
	private long _originalEnterpriseId;
	private boolean _setOriginalEnterpriseId;
	private long _contactId;
	private long _originalContactId;
	private boolean _setOriginalContactId;
	private String _description;
	private double _amount;
	private long _columnBitmask;
	private Contract _escapedModel;
}