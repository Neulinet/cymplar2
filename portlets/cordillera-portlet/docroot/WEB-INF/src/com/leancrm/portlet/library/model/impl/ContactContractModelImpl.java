/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.leancrm.portlet.library.model.impl;

import com.leancrm.portlet.library.model.ContactContract;
import com.leancrm.portlet.library.model.ContactContractModel;
import com.leancrm.portlet.library.service.persistence.ContactContractPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContactContract service. Represents a row in the &quot;crm_ContactContract&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.leancrm.portlet.library.model.ContactContractModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactContractImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactContractImpl
 * @see com.leancrm.portlet.library.model.ContactContract
 * @see com.leancrm.portlet.library.model.ContactContractModel
 * @generated
 */
public class ContactContractModelImpl extends BaseModelImpl<ContactContract>
	implements ContactContractModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact contract model instance should use the {@link com.leancrm.portlet.library.model.ContactContract} interface instead.
	 */
	public static final String TABLE_NAME = "crm_ContactContract";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contactId", Types.BIGINT },
			{ "contractId", Types.BIGINT },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table crm_ContactContract (contactId LONG not null,contractId LONG not null,active_ BOOLEAN,primary key (contactId, contractId))";
	public static final String TABLE_SQL_DROP = "drop table crm_ContactContract";
	public static final String ORDER_BY_JPQL = " ORDER BY contactContract.id.contactId ASC, contactContract.id.contractId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY crm_ContactContract.contactId ASC, crm_ContactContract.contractId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.leancrm.portlet.library.model.ContactContract"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.leancrm.portlet.library.model.ContactContract"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.leancrm.portlet.library.model.ContactContract"),
			true);
	public static long ACTIVE_COLUMN_BITMASK = 1L;
	public static long CONTACTID_COLUMN_BITMASK = 2L;
	public static long CONTRACTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.leancrm.portlet.library.model.ContactContract"));

	public ContactContractModelImpl() {
	}

	@Override
	public ContactContractPK getPrimaryKey() {
		return new ContactContractPK(_contactId, _contractId);
	}

	@Override
	public void setPrimaryKey(ContactContractPK primaryKey) {
		setContactId(primaryKey.contactId);
		setContractId(primaryKey.contractId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ContactContractPK(_contactId, _contractId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ContactContractPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ContactContract.class;
	}

	@Override
	public String getModelClassName() {
		return ContactContract.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contactId", getContactId());
		attributes.put("contractId", getContractId());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}

		Long contractId = (Long)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		_columnBitmask |= CONTACTID_COLUMN_BITMASK;

		if (!_setOriginalContactId) {
			_setOriginalContactId = true;

			_originalContactId = _contactId;
		}

		_contactId = contactId;
	}

	public long getOriginalContactId() {
		return _originalContactId;
	}

	@Override
	public long getContractId() {
		return _contractId;
	}

	@Override
	public void setContractId(long contractId) {
		_columnBitmask |= CONTRACTID_COLUMN_BITMASK;

		if (!_setOriginalContractId) {
			_setOriginalContractId = true;

			_originalContractId = _contractId;
		}

		_contractId = contractId;
	}

	public long getOriginalContractId() {
		return _originalContractId;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ContactContract toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContactContract)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactContractImpl contactContractImpl = new ContactContractImpl();

		contactContractImpl.setContactId(getContactId());
		contactContractImpl.setContractId(getContractId());
		contactContractImpl.setActive(getActive());

		contactContractImpl.resetOriginalValues();

		return contactContractImpl;
	}

	@Override
	public int compareTo(ContactContract contactContract) {
		ContactContractPK primaryKey = contactContract.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContactContract)) {
			return false;
		}

		ContactContract contactContract = (ContactContract)obj;

		ContactContractPK primaryKey = contactContract.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ContactContractModelImpl contactContractModelImpl = this;

		contactContractModelImpl._originalContactId = contactContractModelImpl._contactId;

		contactContractModelImpl._setOriginalContactId = false;

		contactContractModelImpl._originalContractId = contactContractModelImpl._contractId;

		contactContractModelImpl._setOriginalContractId = false;

		contactContractModelImpl._originalActive = contactContractModelImpl._active;

		contactContractModelImpl._setOriginalActive = false;

		contactContractModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactContract> toCacheModel() {
		ContactContractCacheModel contactContractCacheModel = new ContactContractCacheModel();

		contactContractCacheModel.contactId = getContactId();

		contactContractCacheModel.contractId = getContractId();

		contactContractCacheModel.active = getActive();

		return contactContractCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{contactId=");
		sb.append(getContactId());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.leancrm.portlet.library.model.ContactContract");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContactContract.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ContactContract.class
		};
	private long _contactId;
	private long _originalContactId;
	private boolean _setOriginalContactId;
	private long _contractId;
	private long _originalContractId;
	private boolean _setOriginalContractId;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private long _columnBitmask;
	private ContactContract _escapedModel;
}