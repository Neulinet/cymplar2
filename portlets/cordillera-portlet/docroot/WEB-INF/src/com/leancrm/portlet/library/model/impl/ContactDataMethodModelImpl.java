/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.leancrm.portlet.library.model.impl;

import com.leancrm.portlet.library.model.ContactDataMethod;
import com.leancrm.portlet.library.model.ContactDataMethodModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContactDataMethod service. Represents a row in the &quot;crm_ContactDataMethod&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.leancrm.portlet.library.model.ContactDataMethodModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactDataMethodImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactDataMethodImpl
 * @see com.leancrm.portlet.library.model.ContactDataMethod
 * @see com.leancrm.portlet.library.model.ContactDataMethodModel
 * @generated
 */
public class ContactDataMethodModelImpl extends BaseModelImpl<ContactDataMethod>
	implements ContactDataMethodModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact data method model instance should use the {@link com.leancrm.portlet.library.model.ContactDataMethod} interface instead.
	 */
	public static final String TABLE_NAME = "crm_ContactDataMethod";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contactDataMethodId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "contactDataType", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table crm_ContactDataMethod (contactDataMethodId LONG not null primary key,groupId LONG,companyId LONG,name VARCHAR(75) null,title VARCHAR(75) null,contactDataType INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table crm_ContactDataMethod";
	public static final String ORDER_BY_JPQL = " ORDER BY contactDataMethod.contactDataMethodId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY crm_ContactDataMethod.contactDataMethodId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.leancrm.portlet.library.model.ContactDataMethod"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.leancrm.portlet.library.model.ContactDataMethod"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.leancrm.portlet.library.model.ContactDataMethod"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static long CONTACTDATAMETHODID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.leancrm.portlet.library.model.ContactDataMethod"));

	public ContactDataMethodModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactDataMethodId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactDataMethodId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactDataMethodId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactDataMethod.class;
	}

	@Override
	public String getModelClassName() {
		return ContactDataMethod.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contactDataMethodId", getContactDataMethodId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("name", getName());
		attributes.put("title", getTitle());
		attributes.put("contactDataType", getContactDataType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contactDataMethodId = (Long)attributes.get("contactDataMethodId");

		if (contactDataMethodId != null) {
			setContactDataMethodId(contactDataMethodId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Integer contactDataType = (Integer)attributes.get("contactDataType");

		if (contactDataType != null) {
			setContactDataType(contactDataType);
		}
	}

	@Override
	public long getContactDataMethodId() {
		return _contactDataMethodId;
	}

	@Override
	public void setContactDataMethodId(long contactDataMethodId) {
		_contactDataMethodId = contactDataMethodId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public int getContactDataType() {
		return _contactDataType;
	}

	@Override
	public void setContactDataType(int contactDataType) {
		_contactDataType = contactDataType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ContactDataMethod.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactDataMethod toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContactDataMethod)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactDataMethodImpl contactDataMethodImpl = new ContactDataMethodImpl();

		contactDataMethodImpl.setContactDataMethodId(getContactDataMethodId());
		contactDataMethodImpl.setGroupId(getGroupId());
		contactDataMethodImpl.setCompanyId(getCompanyId());
		contactDataMethodImpl.setName(getName());
		contactDataMethodImpl.setTitle(getTitle());
		contactDataMethodImpl.setContactDataType(getContactDataType());

		contactDataMethodImpl.resetOriginalValues();

		return contactDataMethodImpl;
	}

	@Override
	public int compareTo(ContactDataMethod contactDataMethod) {
		long primaryKey = contactDataMethod.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContactDataMethod)) {
			return false;
		}

		ContactDataMethod contactDataMethod = (ContactDataMethod)obj;

		long primaryKey = contactDataMethod.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContactDataMethodModelImpl contactDataMethodModelImpl = this;

		contactDataMethodModelImpl._originalName = contactDataMethodModelImpl._name;

		contactDataMethodModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactDataMethod> toCacheModel() {
		ContactDataMethodCacheModel contactDataMethodCacheModel = new ContactDataMethodCacheModel();

		contactDataMethodCacheModel.contactDataMethodId = getContactDataMethodId();

		contactDataMethodCacheModel.groupId = getGroupId();

		contactDataMethodCacheModel.companyId = getCompanyId();

		contactDataMethodCacheModel.name = getName();

		String name = contactDataMethodCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			contactDataMethodCacheModel.name = null;
		}

		contactDataMethodCacheModel.title = getTitle();

		String title = contactDataMethodCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			contactDataMethodCacheModel.title = null;
		}

		contactDataMethodCacheModel.contactDataType = getContactDataType();

		return contactDataMethodCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{contactDataMethodId=");
		sb.append(getContactDataMethodId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", contactDataType=");
		sb.append(getContactDataType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.leancrm.portlet.library.model.ContactDataMethod");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contactDataMethodId</column-name><column-value><![CDATA[");
		sb.append(getContactDataMethodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactDataType</column-name><column-value><![CDATA[");
		sb.append(getContactDataType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContactDataMethod.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ContactDataMethod.class
		};
	private long _contactDataMethodId;
	private long _groupId;
	private long _companyId;
	private String _name;
	private String _originalName;
	private String _title;
	private int _contactDataType;
	private long _columnBitmask;
	private ContactDataMethod _escapedModel;
}