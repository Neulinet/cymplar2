/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.leancrm.portlet.library.model.impl;

import com.leancrm.portlet.library.model.ContactData;
import com.leancrm.portlet.library.model.ContactDataModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContactData service. Represents a row in the &quot;crm_ContactData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.leancrm.portlet.library.model.ContactDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactDataImpl
 * @see com.leancrm.portlet.library.model.ContactData
 * @see com.leancrm.portlet.library.model.ContactDataModel
 * @generated
 */
public class ContactDataModelImpl extends BaseModelImpl<ContactData>
	implements ContactDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact data model instance should use the {@link com.leancrm.portlet.library.model.ContactData} interface instead.
	 */
	public static final String TABLE_NAME = "crm_ContactData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contactDataId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "contactDataType", Types.INTEGER },
			{ "readOnly", Types.BOOLEAN },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "contactDataMethodId", Types.BIGINT },
			{ "contactId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table crm_ContactData (contactDataId LONG not null primary key,groupId LONG,contactDataType INTEGER,readOnly BOOLEAN,companyId LONG,createDate DATE null,modifiedDate DATE null,contactDataMethodId LONG,contactId LONG)";
	public static final String TABLE_SQL_DROP = "drop table crm_ContactData";
	public static final String ORDER_BY_JPQL = " ORDER BY contactData.contactDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY crm_ContactData.contactDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.leancrm.portlet.library.model.ContactData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.leancrm.portlet.library.model.ContactData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.leancrm.portlet.library.model.ContactData"),
			true);
	public static long CONTACTDATAMETHODID_COLUMN_BITMASK = 1L;
	public static long CONTACTID_COLUMN_BITMASK = 2L;
	public static long CONTACTDATAID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.leancrm.portlet.library.model.ContactData"));

	public ContactDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactData.class;
	}

	@Override
	public String getModelClassName() {
		return ContactData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contactDataId", getContactDataId());
		attributes.put("groupId", getGroupId());
		attributes.put("contactDataType", getContactDataType());
		attributes.put("readOnly", getReadOnly());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("contactDataMethodId", getContactDataMethodId());
		attributes.put("contactId", getContactId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contactDataId = (Long)attributes.get("contactDataId");

		if (contactDataId != null) {
			setContactDataId(contactDataId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Integer contactDataType = (Integer)attributes.get("contactDataType");

		if (contactDataType != null) {
			setContactDataType(contactDataType);
		}

		Boolean readOnly = (Boolean)attributes.get("readOnly");

		if (readOnly != null) {
			setReadOnly(readOnly);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long contactDataMethodId = (Long)attributes.get("contactDataMethodId");

		if (contactDataMethodId != null) {
			setContactDataMethodId(contactDataMethodId);
		}

		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}
	}

	@Override
	public long getContactDataId() {
		return _contactDataId;
	}

	@Override
	public void setContactDataId(long contactDataId) {
		_contactDataId = contactDataId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public int getContactDataType() {
		return _contactDataType;
	}

	@Override
	public void setContactDataType(int contactDataType) {
		_contactDataType = contactDataType;
	}

	@Override
	public boolean getReadOnly() {
		return _readOnly;
	}

	@Override
	public boolean isReadOnly() {
		return _readOnly;
	}

	@Override
	public void setReadOnly(boolean readOnly) {
		_readOnly = readOnly;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getContactDataMethodId() {
		return _contactDataMethodId;
	}

	@Override
	public void setContactDataMethodId(long contactDataMethodId) {
		_columnBitmask |= CONTACTDATAMETHODID_COLUMN_BITMASK;

		if (!_setOriginalContactDataMethodId) {
			_setOriginalContactDataMethodId = true;

			_originalContactDataMethodId = _contactDataMethodId;
		}

		_contactDataMethodId = contactDataMethodId;
	}

	public long getOriginalContactDataMethodId() {
		return _originalContactDataMethodId;
	}

	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		_columnBitmask |= CONTACTID_COLUMN_BITMASK;

		if (!_setOriginalContactId) {
			_setOriginalContactId = true;

			_originalContactId = _contactId;
		}

		_contactId = contactId;
	}

	public long getOriginalContactId() {
		return _originalContactId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ContactData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContactData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactDataImpl contactDataImpl = new ContactDataImpl();

		contactDataImpl.setContactDataId(getContactDataId());
		contactDataImpl.setGroupId(getGroupId());
		contactDataImpl.setContactDataType(getContactDataType());
		contactDataImpl.setReadOnly(getReadOnly());
		contactDataImpl.setCompanyId(getCompanyId());
		contactDataImpl.setCreateDate(getCreateDate());
		contactDataImpl.setModifiedDate(getModifiedDate());
		contactDataImpl.setContactDataMethodId(getContactDataMethodId());
		contactDataImpl.setContactId(getContactId());

		contactDataImpl.resetOriginalValues();

		return contactDataImpl;
	}

	@Override
	public int compareTo(ContactData contactData) {
		long primaryKey = contactData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContactData)) {
			return false;
		}

		ContactData contactData = (ContactData)obj;

		long primaryKey = contactData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContactDataModelImpl contactDataModelImpl = this;

		contactDataModelImpl._originalContactDataMethodId = contactDataModelImpl._contactDataMethodId;

		contactDataModelImpl._setOriginalContactDataMethodId = false;

		contactDataModelImpl._originalContactId = contactDataModelImpl._contactId;

		contactDataModelImpl._setOriginalContactId = false;

		contactDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactData> toCacheModel() {
		ContactDataCacheModel contactDataCacheModel = new ContactDataCacheModel();

		contactDataCacheModel.contactDataId = getContactDataId();

		contactDataCacheModel.groupId = getGroupId();

		contactDataCacheModel.contactDataType = getContactDataType();

		contactDataCacheModel.readOnly = getReadOnly();

		contactDataCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactDataCacheModel.createDate = createDate.getTime();
		}
		else {
			contactDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactDataCacheModel.contactDataMethodId = getContactDataMethodId();

		contactDataCacheModel.contactId = getContactId();

		return contactDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{contactDataId=");
		sb.append(getContactDataId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", contactDataType=");
		sb.append(getContactDataType());
		sb.append(", readOnly=");
		sb.append(getReadOnly());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", contactDataMethodId=");
		sb.append(getContactDataMethodId());
		sb.append(", contactId=");
		sb.append(getContactId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.leancrm.portlet.library.model.ContactData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contactDataId</column-name><column-value><![CDATA[");
		sb.append(getContactDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactDataType</column-name><column-value><![CDATA[");
		sb.append(getContactDataType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>readOnly</column-name><column-value><![CDATA[");
		sb.append(getReadOnly());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactDataMethodId</column-name><column-value><![CDATA[");
		sb.append(getContactDataMethodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContactData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ContactData.class
		};
	private long _contactDataId;
	private long _groupId;
	private int _contactDataType;
	private boolean _readOnly;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _contactDataMethodId;
	private long _originalContactDataMethodId;
	private boolean _setOriginalContactDataMethodId;
	private long _contactId;
	private long _originalContactId;
	private boolean _setOriginalContactId;
	private long _columnBitmask;
	private ContactData _escapedModel;
}