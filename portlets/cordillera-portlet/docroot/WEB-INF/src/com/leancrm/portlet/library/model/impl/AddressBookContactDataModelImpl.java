/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.leancrm.portlet.library.model.impl;

import com.leancrm.portlet.library.model.AddressBookContactData;
import com.leancrm.portlet.library.model.AddressBookContactDataModel;
import com.leancrm.portlet.library.service.persistence.AddressBookContactDataPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AddressBookContactData service. Represents a row in the &quot;crm_AddressBookContactData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.leancrm.portlet.library.model.AddressBookContactDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressBookContactDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressBookContactDataImpl
 * @see com.leancrm.portlet.library.model.AddressBookContactData
 * @see com.leancrm.portlet.library.model.AddressBookContactDataModel
 * @generated
 */
public class AddressBookContactDataModelImpl extends BaseModelImpl<AddressBookContactData>
	implements AddressBookContactDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address book contact data model instance should use the {@link com.leancrm.portlet.library.model.AddressBookContactData} interface instead.
	 */
	public static final String TABLE_NAME = "crm_AddressBookContactData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "addressBookId", Types.BIGINT },
			{ "contactDataId", Types.BIGINT },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table crm_AddressBookContactData (addressBookId LONG not null,contactDataId LONG not null,active_ BOOLEAN,primary key (addressBookId, contactDataId))";
	public static final String TABLE_SQL_DROP = "drop table crm_AddressBookContactData";
	public static final String ORDER_BY_JPQL = " ORDER BY addressBookContactData.id.addressBookId ASC, addressBookContactData.id.contactDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY crm_AddressBookContactData.addressBookId ASC, crm_AddressBookContactData.contactDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.leancrm.portlet.library.model.AddressBookContactData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.leancrm.portlet.library.model.AddressBookContactData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.leancrm.portlet.library.model.AddressBookContactData"),
			true);
	public static long ADDRESSBOOKID_COLUMN_BITMASK = 1L;
	public static long CONTACTDATAID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.leancrm.portlet.library.model.AddressBookContactData"));

	public AddressBookContactDataModelImpl() {
	}

	@Override
	public AddressBookContactDataPK getPrimaryKey() {
		return new AddressBookContactDataPK(_addressBookId, _contactDataId);
	}

	@Override
	public void setPrimaryKey(AddressBookContactDataPK primaryKey) {
		setAddressBookId(primaryKey.addressBookId);
		setContactDataId(primaryKey.contactDataId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AddressBookContactDataPK(_addressBookId, _contactDataId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AddressBookContactDataPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AddressBookContactData.class;
	}

	@Override
	public String getModelClassName() {
		return AddressBookContactData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("addressBookId", getAddressBookId());
		attributes.put("contactDataId", getContactDataId());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long addressBookId = (Long)attributes.get("addressBookId");

		if (addressBookId != null) {
			setAddressBookId(addressBookId);
		}

		Long contactDataId = (Long)attributes.get("contactDataId");

		if (contactDataId != null) {
			setContactDataId(contactDataId);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public long getAddressBookId() {
		return _addressBookId;
	}

	@Override
	public void setAddressBookId(long addressBookId) {
		_columnBitmask |= ADDRESSBOOKID_COLUMN_BITMASK;

		if (!_setOriginalAddressBookId) {
			_setOriginalAddressBookId = true;

			_originalAddressBookId = _addressBookId;
		}

		_addressBookId = addressBookId;
	}

	public long getOriginalAddressBookId() {
		return _originalAddressBookId;
	}

	@Override
	public long getContactDataId() {
		return _contactDataId;
	}

	@Override
	public void setContactDataId(long contactDataId) {
		_columnBitmask |= CONTACTDATAID_COLUMN_BITMASK;

		if (!_setOriginalContactDataId) {
			_setOriginalContactDataId = true;

			_originalContactDataId = _contactDataId;
		}

		_contactDataId = contactDataId;
	}

	public long getOriginalContactDataId() {
		return _originalContactDataId;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AddressBookContactData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AddressBookContactData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressBookContactDataImpl addressBookContactDataImpl = new AddressBookContactDataImpl();

		addressBookContactDataImpl.setAddressBookId(getAddressBookId());
		addressBookContactDataImpl.setContactDataId(getContactDataId());
		addressBookContactDataImpl.setActive(getActive());

		addressBookContactDataImpl.resetOriginalValues();

		return addressBookContactDataImpl;
	}

	@Override
	public int compareTo(AddressBookContactData addressBookContactData) {
		AddressBookContactDataPK primaryKey = addressBookContactData.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AddressBookContactData)) {
			return false;
		}

		AddressBookContactData addressBookContactData = (AddressBookContactData)obj;

		AddressBookContactDataPK primaryKey = addressBookContactData.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		AddressBookContactDataModelImpl addressBookContactDataModelImpl = this;

		addressBookContactDataModelImpl._originalAddressBookId = addressBookContactDataModelImpl._addressBookId;

		addressBookContactDataModelImpl._setOriginalAddressBookId = false;

		addressBookContactDataModelImpl._originalContactDataId = addressBookContactDataModelImpl._contactDataId;

		addressBookContactDataModelImpl._setOriginalContactDataId = false;

		addressBookContactDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AddressBookContactData> toCacheModel() {
		AddressBookContactDataCacheModel addressBookContactDataCacheModel = new AddressBookContactDataCacheModel();

		addressBookContactDataCacheModel.addressBookId = getAddressBookId();

		addressBookContactDataCacheModel.contactDataId = getContactDataId();

		addressBookContactDataCacheModel.active = getActive();

		return addressBookContactDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{addressBookId=");
		sb.append(getAddressBookId());
		sb.append(", contactDataId=");
		sb.append(getContactDataId());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.leancrm.portlet.library.model.AddressBookContactData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addressBookId</column-name><column-value><![CDATA[");
		sb.append(getAddressBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactDataId</column-name><column-value><![CDATA[");
		sb.append(getContactDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AddressBookContactData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AddressBookContactData.class
		};
	private long _addressBookId;
	private long _originalAddressBookId;
	private boolean _setOriginalAddressBookId;
	private long _contactDataId;
	private long _originalContactDataId;
	private boolean _setOriginalContactDataId;
	private boolean _active;
	private long _columnBitmask;
	private AddressBookContactData _escapedModel;
}