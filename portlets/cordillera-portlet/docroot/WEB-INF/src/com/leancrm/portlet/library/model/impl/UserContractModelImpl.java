/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.leancrm.portlet.library.model.impl;

import com.leancrm.portlet.library.model.UserContract;
import com.leancrm.portlet.library.model.UserContractModel;
import com.leancrm.portlet.library.service.persistence.UserContractPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserContract service. Represents a row in the &quot;crm_UserContract&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.leancrm.portlet.library.model.UserContractModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserContractImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserContractImpl
 * @see com.leancrm.portlet.library.model.UserContract
 * @see com.leancrm.portlet.library.model.UserContractModel
 * @generated
 */
public class UserContractModelImpl extends BaseModelImpl<UserContract>
	implements UserContractModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user contract model instance should use the {@link com.leancrm.portlet.library.model.UserContract} interface instead.
	 */
	public static final String TABLE_NAME = "crm_UserContract";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "contractId", Types.BIGINT },
			{ "active_", Types.BOOLEAN },
			{ "accessLevel", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table crm_UserContract (userId LONG not null,contractId LONG not null,active_ BOOLEAN,accessLevel INTEGER,createDate DATE null,modifiedDate DATE null,primary key (userId, contractId))";
	public static final String TABLE_SQL_DROP = "drop table crm_UserContract";
	public static final String ORDER_BY_JPQL = " ORDER BY userContract.id.userId ASC, userContract.id.contractId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY crm_UserContract.userId ASC, crm_UserContract.contractId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.leancrm.portlet.library.model.UserContract"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.leancrm.portlet.library.model.UserContract"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.leancrm.portlet.library.model.UserContract"),
			true);
	public static long ACCESSLEVEL_COLUMN_BITMASK = 1L;
	public static long ACTIVE_COLUMN_BITMASK = 2L;
	public static long CONTRACTID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.leancrm.portlet.library.model.UserContract"));

	public UserContractModelImpl() {
	}

	@Override
	public UserContractPK getPrimaryKey() {
		return new UserContractPK(_userId, _contractId);
	}

	@Override
	public void setPrimaryKey(UserContractPK primaryKey) {
		setUserId(primaryKey.userId);
		setContractId(primaryKey.contractId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserContractPK(_userId, _contractId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserContractPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserContract.class;
	}

	@Override
	public String getModelClassName() {
		return UserContract.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("contractId", getContractId());
		attributes.put("active", getActive());
		attributes.put("accessLevel", getAccessLevel());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long contractId = (Long)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Integer accessLevel = (Integer)attributes.get("accessLevel");

		if (accessLevel != null) {
			setAccessLevel(accessLevel);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getContractId() {
		return _contractId;
	}

	@Override
	public void setContractId(long contractId) {
		_columnBitmask |= CONTRACTID_COLUMN_BITMASK;

		if (!_setOriginalContractId) {
			_setOriginalContractId = true;

			_originalContractId = _contractId;
		}

		_contractId = contractId;
	}

	public long getOriginalContractId() {
		return _originalContractId;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@Override
	public int getAccessLevel() {
		return _accessLevel;
	}

	@Override
	public void setAccessLevel(int accessLevel) {
		_columnBitmask |= ACCESSLEVEL_COLUMN_BITMASK;

		if (!_setOriginalAccessLevel) {
			_setOriginalAccessLevel = true;

			_originalAccessLevel = _accessLevel;
		}

		_accessLevel = accessLevel;
	}

	public int getOriginalAccessLevel() {
		return _originalAccessLevel;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserContract toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserContract)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserContractImpl userContractImpl = new UserContractImpl();

		userContractImpl.setUserId(getUserId());
		userContractImpl.setContractId(getContractId());
		userContractImpl.setActive(getActive());
		userContractImpl.setAccessLevel(getAccessLevel());
		userContractImpl.setCreateDate(getCreateDate());
		userContractImpl.setModifiedDate(getModifiedDate());

		userContractImpl.resetOriginalValues();

		return userContractImpl;
	}

	@Override
	public int compareTo(UserContract userContract) {
		UserContractPK primaryKey = userContract.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserContract)) {
			return false;
		}

		UserContract userContract = (UserContract)obj;

		UserContractPK primaryKey = userContract.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		UserContractModelImpl userContractModelImpl = this;

		userContractModelImpl._originalUserId = userContractModelImpl._userId;

		userContractModelImpl._setOriginalUserId = false;

		userContractModelImpl._originalContractId = userContractModelImpl._contractId;

		userContractModelImpl._setOriginalContractId = false;

		userContractModelImpl._originalActive = userContractModelImpl._active;

		userContractModelImpl._setOriginalActive = false;

		userContractModelImpl._originalAccessLevel = userContractModelImpl._accessLevel;

		userContractModelImpl._setOriginalAccessLevel = false;

		userContractModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserContract> toCacheModel() {
		UserContractCacheModel userContractCacheModel = new UserContractCacheModel();

		userContractCacheModel.userId = getUserId();

		userContractCacheModel.contractId = getContractId();

		userContractCacheModel.active = getActive();

		userContractCacheModel.accessLevel = getAccessLevel();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userContractCacheModel.createDate = createDate.getTime();
		}
		else {
			userContractCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userContractCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userContractCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return userContractCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", accessLevel=");
		sb.append(getAccessLevel());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.leancrm.portlet.library.model.UserContract");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessLevel</column-name><column-value><![CDATA[");
		sb.append(getAccessLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserContract.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserContract.class
		};
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _contractId;
	private long _originalContractId;
	private boolean _setOriginalContractId;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private int _accessLevel;
	private int _originalAccessLevel;
	private boolean _setOriginalAccessLevel;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private UserContract _escapedModel;
}